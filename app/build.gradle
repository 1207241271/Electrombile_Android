import groovy.swing.SwingBuilder
apply plugin: 'com.android.application'

def getDate() {
    def date = new Date()
//    def formattedDate = date.format('yyyyMMddHHmmss')
    def formattedDate = date.format('MMdd')
    return formattedDate
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(':app:assembleRelease')) {
        def storePass = ''
        def keyPass = ''
        if(System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Enter password',
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        pack: true,
                        show: true
                ) {
                    vbox { // Put everything below each other
                        label(text: "Please enter store passphrase:")
                        def inputStorePass = passwordField()
                        label(text: "Please enter key passphrase:")
                        def inputKeyPass = passwordField()
                        button(defaultButton: true,
                                text: 'OK',
                                actionPerformed: {
                            storePass = inputStorePass.password;
                            keyPass = inputKeyPass.password;
                            dispose();
                        })
                    }
                }
            }
        } else {
            storePass = System.console().readPassword("\nPlease enter store passphrase: ")
            keyPass = System.console().readPassword("\nPlease enter key passphrase: ")
        }

        if(storePass.size() <= 0 || keyPass.size() <= 0) {
            throw new InvalidUserDataException("You must enter the passwords to proceed.")
        }

        storePass = new String(storePass)
        keyPass = new String(keyPass)

        android.signingConfigs.release.storePassword = storePass
        android.signingConfigs.release.keyPassword = keyPass
        android.signingConfigs.debug.storePassword = storePass
        android.signingConfigs.debug.keyPassword = keyPass
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.1'

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1;
        }

        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = getDate()
        def version_Code = versionProps['VERSION_CODE'].toInteger() + value

        versionProps['VERSION_MAJOR'] = versionMajor.toString()
        versionProps['VERSION_MINOR'] = versionMinor.toString()
        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_CODE'] = version_Code.toString()

        if (value == 1) {
            versionProps.store(versionPropsFile.newWriter(), null)
        }

        defaultConfig {
            versionCode version_Code
            versionName "${versionMajor}.${versionMinor}.${versionPatch} (${versionBuild})"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    defaultConfig {
        applicationId "com.xunce.electrombile"
        multiDexEnabled true

        //refer to https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-apache-http-client
        useLibrary 'org.apache.http.legacy'
        minSdkVersion 14
        targetSdkVersion 24
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            storeFile file('../keystore/Electromile.debug.keystore')
        }
        release {
            keyAlias 'androidreleasekey'
            storeFile file('../keystore/Electromile.release.keystore')
        }
    }

    def propsFile = rootProject.file('keystore.properties')
    if (propsFile.exists() ) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        android.signingConfigs['release'].storePassword = props['storePassword']
        android.signingConfigs['release'].keyPassword = props['keyPassword']
        android.signingConfigs['debug'].storePassword = props['storePassword']
        android.signingConfigs['debug'].keyPassword = props['keyPassword']
    }else {
        throw new GradleException("Could not read keystore.properties!")
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"

            minifyEnabled false
//            minifyEnabled true
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"

            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            debuggable true
        }
    }

    productFlavors {
        _360 {}
        baidu {}
        xiaomi {}
        tencent {}
        FIR {
            targetSdkVersion 22
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }


    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "SafeGuard_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    //fix third library duplicate META-INF problem
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ECLIPSE_.SF'
        exclude 'META-INF/ECLIPSE_.RSA'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.android.support:support-v4:24.2.0'

    compile 'cn.leancloud.android:avoscloud-sdk:v3.13.6'
    compile 'cn.leancloud.android:avoscloud-statistics:v3.13.6'

    //    compile 'com.android.support:design:22.2.0'
    compile 'com.orhanobut:logger:1.11'
    compile 'com.malinskiy:materialicons:1.0.2'

    compile 'org.greenrobot:eventbus:3.0.0'

    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    compile ('org.eclipse.paho:org.eclipse.paho.android.service:1.0.2') {
        exclude module: 'support-v4'
    }


}

