apply plugin: 'com.android.application'

def getDate() {
    def date = new Date()
//    def formattedDate = date.format('yyyyMMddHHmmss')
    def formattedDate = date.format('MMdd')
    return formattedDate
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1;
        }

        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = getDate()
        def version_Code = versionProps['VERSION_CODE'].toInteger() + value

        versionProps['VERSION_MAJOR'] = versionMajor.toString()
        versionProps['VERSION_MINOR'] = versionMinor.toString()
        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_CODE'] = version_Code.toString()

        if (value == 1) {
            versionProps.store(versionPropsFile.newWriter(), null)
        }

        defaultConfig {
            versionCode version_Code
            versionName "${versionMajor}.${versionMinor}.${versionPatch} (${versionBuild})"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    defaultConfig {
        applicationId "com.xunce.electrombile"
        multiDexEnabled true
        minSdkVersion 10
       // targetSdkVersion 3
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'Xc20150101'
            storeFile file('../keystore/Electromile.debug.keystore')
            storePassword 'Xc20150101'
        }
        release {
            keyAlias 'androidreleasekey'
            keyPassword 'Xc20150101'
            storeFile file('../keystore/Electromile.release.keystore')
            storePassword 'Xc20150101'
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"

            minifyEnabled false
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "SafeGuard_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"

            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            debuggable true
        }
    }

    productFlavors {
        wandoujia {}
        _360 {}
        baidu {}
        xiaomi {}
        tencent {}
        taobao {}
        FIR {
//            minSdkVersion 10
            minSdkVersion 11
//            targetSdkVersion 17
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    //fix third library duplicate META-INF problem
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:22.0.0'
    compile 'im.fir:fir-sdk:latest.integration@aar'
    compile 'cn.leancloud.android:avoscloud-sdk:v3.3+'
    compile 'cn.leancloud.android:avoscloud-push:v3.3+@aar'
    compile 'cn.leancloud.android:Java-WebSocket:1.2.0-leancloud'
    compile 'cn.leancloud.android:avoscloud-statistics:v3.3+@aar'
    compile 'cn.leancloud.android:avoscloud-feedback:v3.3+@aar'
    compile 'cn.leancloud.android:avoscloud-sns:v3.3+@aar'
    compile 'cn.leancloud.android:qq-sdk:1.6.1-leancloud'
    compile 'cn.leancloud.android:avoscloud-search:v3.3+@aar'
    compile files('libs/xUtils-2.6.14.jar')
    compile files('libs/mqttv3-1.0.2.jar')
    compile files('libs/mqttv3-service-1.0.2.jar')
    compile files('libs/achartengine-1.1.0.jar')
    //    compile 'com.android.support:design:22.2.0'
    compile 'com.orhanobut:logger:1.11'
    compile 'com.malinskiy:materialicons:1.0.2'
    compile files('libs/Bughd_android_sdk_v1.3.7.jar')
    compile files('libs/core.jar')
    compile files('src/main/jniLibs/jpush-android-2.1.5.jar')
    compile 'org.greenrobot:eventbus:3.0.0'

}

